#!/bin/bash

# global parameters
COOKIE_JAR=~/.atcoder-cookie
URIBASE=https://atcoder.jp
CURLCMD=(
		curl -sS
		-b "$COOKIE_JAR"
		-c "$COOKIE_JAR"
)

declare -f run
declare SOURCEFILE
declare LANGUAGEID

[ ! -x ~/.atcoder ] || . ~/.atcoder

# common functions
exitm() {
	echo 1>&2 "ABORT: $@"
	exit 1
}
m() {
	echo 1>&2 "INFO: $@"
}

# http wrapper
atcoder_http_get() {
	local URIPATH="$1"
	shift
	"${CURLCMD[@]}" "${URIBASE}${URIPATH}" "$@"
}
atcoder_http_post() {
	local URIPATH="$1"
	shift
	"${CURLCMD[@]}" -XPOST "${URIBASE}${URIPATH}" "$@"
}

atcoder_extract_js_var() {
	local VARNAME VALUE
	VARNAME="$1"
	[ "X$VARNAME" != X ] || exitm "INTERNAL ERROR: VARNAME MISSING"
	sed -ne "/var $VARNAME = \"/ { s/.*var $VARNAME = \"//; s/\".*//; p; Q }" <<< "$CONTENT"
}

atcoder_check_logged_in() {
	local CONTENT USER_SCREEN_NAME
	CONTENT="$(atcoder_http_get /home)" || exitm "failed to get /home"
	USER_SCREEN_NAME="$(atcoder_extract_js_var userScreenName <<< "$CONTENT")"
	if [ "X$USER_SCREEN_NAME" = X ]
	then m "not logged in."
		return 1
	else m "logged in as: $USER_SCREEN_NAME"
		return 0
	fi
}

atcoder_do_login() {
	local CONTENT CSRF_TOKEN USER_SCREEN_NAME
	CONTENT="$(atcoder_http_get /login)" || exitm "failed to get /login"
	CSRF_TOKEN="$(atcoder_extract_js_var csrfToken <<< "$CONTENT")"
	[ "X$CSRF_TOKEN" != X ] || exitm "failed to detect csrf_token"
	# m "csrf_token: $CSRF_TOKEN"
	USER_SCREEN_NAME="$(atcoder_extract_js_var userScreenName <<< "$CONTENT")"
	if [ "X$USER_SCREEN_NAME" = X ]
	then m "not logged in."
	else m "logged in as: $USER_SCREEN_NAME"
		return 0
	fi

	echo 1>&2 -n "user: "
	read USER_SCREEN_NAME || exitm "Cancelled."

	local PASSWORD
	echo 1>&2 -n "pass: "
	read -s PASSWORD || exitm "Cancelled."

	m "login..."
	atcoder_http_post /login \
		-F "username=$USER_SCREEN_NAME" \
		-F "password=$PASSWORD" \
		-F "csrf_token=$CSRF_TOKEN" \
		-o /dev/null -w '%{http_code}\n' ||
		exitm "failed to post /login"

	atcoder_check_logged_in
	case "$?" in
	0)
		m "login ok."
		return 0
		;;
	*)
		m "login failed."
		return 1
		;;
	esac
}

atcoder_do_logout() {
	local CONTENT CSRF_TOKEN USER_SCREEN_NAME
	CONTENT="$(atcoder_http_get /login)" || exitm "failed to get /login"
	CSRF_TOKEN="$(atcoder_extract_js_var csrfToken <<< "$CONTENT")"
	[ "X$CSRF_TOKEN" != X ] || exitm "failed to detect csrf_token"
	# m "csrf_token: $CSRF_TOKEN"
	USER_SCREEN_NAME="$(atcoder_extract_js_var userScreenName <<< "$CONTENT")"
	if [ "X$USER_SCREEN_NAME" = X ]
	then m "not logged in."
		return 0
	else m "logged in as: $USER_SCREEN_NAME"
	fi

	m "logout..."
	atcoder_http_post /logout \
		-F "csrf_token=$CSRF_TOKEN" \
		-o /dev/null -w '%{http_code}\n' ||
		exitm "failed to post /logout"

	atcoder_check_logged_in
	case "$?" in
	1)
		m "logout ok."
		return 0
		;;
	*)
		m "logout failed."
		return 1
		;;
	esac
}

atcoder_task() {
	local SUBCOMMAND="$1"
	local CONTENT CONTEST PROBLEM
	CONTEST="$(pwd | sed -ne '\@/a[br]c[0-9]\+/[a-z]$@ { s@.*/\(a[br]c[0-9]\+\)/\([a-z]$\)@\1@; p }')"
	PROBLEM="$(pwd | sed -ne '\@/a[br]c[0-9]\+/[a-z]$@ { s@.*/\(a[br]c[0-9]\+\)/\([a-z]$\)@\2@; p }')"
	[ "X$CONTEST" != X ] || exitm "failed to detect CONTEST"
	[ "X$PROBLEM" != X ] || exitm "failed to detect PROBLEM"
	m CONTEST: $CONTEST
	m PROBLEM: $PROBLEM
	local TASKPATH="/contests/${CONTEST}/tasks/${CONTEST}_${PROBLEM}"
	CONTENT="$(atcoder_http_get "$TASKPATH")" || exitm "failed to get $TASKPATH"

	case "$SUBCOMMAND" in
	fetch)
		[ -d sample ] || mkdir sample || exitm "failed to mkdir sample"
		local SAMPLENO=1
		while grep -q "Sample Input $SAMPLENO" <<< "$CONTENT"
		do
			m found sample $SAMPLENO
			sed -ne '\@<h3>Sample Input '$SAMPLENO'</h3><pre>@,$ {
				\@</pre>@ Q
				s/.*<pre>//
				s/\r$//
				p
			}' <<< $CONTENT > sample/$SAMPLENO.in
			sed -ne '\@<h3>Sample Output '$SAMPLENO'</h3><pre>@,$ {
				\@</pre>@ Q
				s/.*<pre>//
				s/\r$//
				p
			}' <<< $CONTENT > sample/$SAMPLENO.out
			SAMPLENO=$(( SAMPLENO + 1 ))
		done
		;;

	submit)
		local CSRF_TOKEN USER_SCREEN_NAME
		CSRF_TOKEN="$(atcoder_extract_js_var csrfToken <<< "$CONTENT")"
		[ "X$CSRF_TOKEN" != X ] || exitm "failed to detect csrf_token"
		USER_SCREEN_NAME="$(atcoder_extract_js_var userScreenName <<< "$CONTENT")"
		[ "X$USER_SCREEN_NAME" != X ] || exitm "login first"
		[ -e "${SOURCEFILE}" ] || exitm "no source"

		m "submit..."
		atcoder_http_post "/contests/${CONTEST}/submit" \
			--data-urlencode "data.LanguageId=${LANGUAGEID}" \
			--data-urlencode "data.TaskScreenName=${CONTEST}_${PROBLEM}" \
			--data-urlencode "sourceCode=$(cat "${SOURCEFILE}")" \
			--data-urlencode "csrf_token=$CSRF_TOKEN" \
			-o /dev/null -w '%{http_code}\n' ||
			exitm "submit failed."
		;;
	*)
		exitm "INTERNAL ERROR: unknown: $SUBCOMMAND"
		;;
	esac
}

atcoder_do_fetch() {
	atcoder_task fetch
}

atcoder_do_init() {
	local WORKROOT CPFROM CPTO
	WORKROOT="$(git rev-parse --show-toplevel)"
	RC="$?"
	case "$RC" in
	0)
		;;
	*)
		exitm "Failed to detect WORKROOT($RC). Please check if git repo is properly checked out."
		;;
	esac

	CPFROM="${WORKROOT}/templates/${SOURCEFILE}"
	CPTO="./${SOURCEFILE}"
	if [ -e "$CPTO" ]
	then
		echo 1>&2 -n "$CPTO already exists. Overwrite? [y/N]"
		read C
		RC="$?"
		case "$RC" in
		0)
			;;
		*)
			exitm "Cancelled."
			;;
		esac
		case "$C" in
		Y|y)
			;;
		*)
			exitm "Cancelled."
			;;
		esac
	fi

	m cp "$CPFROM" "$CPTO"
	cp "$CPFROM" "$CPTO" || exitm "cp faield."
}

atcoder_do_test() {
	[ -d sample ] || {
		m "fetching first."
		atcoder_do_fetch
	}
	local SAMPLE_IN SAMPLE_OUT RUN_OUT RC
	RC=0
	while read SAMPLE_IN
	do
		SAMPLE_OUT="${SAMPLE_IN%.in}.out"
		m "run < ${SAMPLE_IN}"
		RUN_OUT="$(run < "${SAMPLE_IN}")" || exitm "run failed!"
		if diff -U0 -L expected -L got "$SAMPLE_OUT" <(echo "$RUN_OUT")
		then
			m OK
		else
			m NG
			RC=1
		fi
	done < <(find sample -name '*.in' | sort -n)
	return "$RC"
}

atcoder_do_submit() {
	atcoder_task submit
}

# dispatch
SUBCOMMAND="$1"
shift
case "$SUBCOMMAND" in
check-logged-in|whoami)
	atcoder_check_logged_in
	;;
login)
	atcoder_do_login
	;;
logout)
	atcoder_do_logout
	;;
init|gen)
	atcoder_do_init
	;;
fetch)
	atcoder_do_fetch
	;;
test|t)
	atcoder_do_test
	;;
submit|sub)
	m "testing first."
	if atcoder_do_test
	then
		m "All tests OK."
		m "Now submit!"
		atcoder_do_submit
	else
		exitm "test failed."
	fi
	;;
force-submit)
	atcoder_do_submit
	;;
'')
	exitm "SUBCOMMAND MISSING"
	;;
*)
	exitm "UNKNOWN SUBCOMMAND: $SUBCOMMAND"
	;;
esac
